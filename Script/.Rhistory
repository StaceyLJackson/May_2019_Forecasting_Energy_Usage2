NA_mean <- replace(newDF2,TRUE, lapply(newDF2,na.aggregate))
sum(is.na(NA_mean))
head(NA_mean)##TIME HAS DISAPPEARED
str(NA_mean)
NA_mean <- NA_mean%>%mutate(Global_active_power=Global_active_power*1000/60)
house_month <- NA_mean%>%
group_by(round(year),round(month))%>%
summarize(month_total=sum(Global_active_power)/1000)
x <- rownames(house_month)
house_month <- cbind(X=x,house_month)
ts_month<-ts(house_month$month_total, frequency=12,start=c(2007,1))
ts_month
ggplot2::autoplot(ts_month)
# Decompose into trend, seasonal and remainder
decomposed_ts_month <- stl(ts_month, s.window = "periodic")
p <- ggplot(data=trainingData1, mapping=aes(x=USERID, y=Location))
p + geom_point()
sapply(phones, var)
sapply(trainingData1[,c(1:30)])
sapply(trainingData1[,c(1:30)], var)
sapply(trainingData1[,c(1:100)], var)
sapply(trainingData1[,c(1:520)], var)
sapply(trainingData1[,c(1:300)], var)
sapply(trainingData1[,c(1:300)], sd)
sapply(phones, sd)
phones <- split(trainingData1, trainingData1$PHONEID)
sapply(phones, function(x) {
colMeans(x[, c(1:50)])
})
#variance and standard deviation
sapply(phones, var)
sapply(phones, sd)
#variance and standard deviation
sapply(phones, var)
sapply(trainingData1[,c(1:300)], sd)
sapply(trainingData1[,c(1:300)], var)
sapply(trainingData1, var)
sapply(trainingData1[,c(1:464)], var)
sapply(trainingData1[,c(1:466)], var)
sapply(trainingData1[,c(1:465)], var)
sapply(trainingData1[,c(1:466)], var)
sapply(trainingData1[,c(1:465)], var)
sapply(trainingData1[,c(1:465)], sd)
sapply(trainingData1[,c(1:465)], var)
sapply(trainingData1[,c(1:465)], var)
low_variance <- sapply(trainingData1[,c(1:465)], var)
low variance
low_variance
low_variance <- sapply(trainingData1[,c(1:465)], var)
low_variance_WAP <- sapply(low_variance, function(x){
(x<5)
})
low_variance_WAP
low_variance_WAP <- sapply(low_variance, function(x){
names(which(x<5))
})
low_variance_WAP
low_variance <- sapply(trainingData1[,c(1:465)], var)
low_variance_WAP <- sapply(low_variance, function(x){
names(which(x<5))
})
low_variance_WAP
low_variance <- sapply(trainingData1[,c(1:465)], var)
low_variance_WAP <- sapply(low_variance, function(x){
(x<5)
})
low_variance_WAP
low_variance <- sapply(trainingData1[,c(1:465)], var)
low_variance_WAP <- sapply(low_variance, function(x){
(x<5)
})
low_variance_WAP[TRUE]
low_variance_WAP[TRUE]
which(low_variance_WAP, arr.ind = TRUE)
floors_long_lat <- trainingData1%>%
filter(FLOOR)%>%
ggplot(data=trainingData1, mapping=aes(x=LONGITUDE, y=LATTIUDE))+geom_point(colour=FLOOR)
floors_long_lat <- trainingData1%>%
filter(FLOOR)%>%
ggplot(data=trainingData1, mapping=aes(x=LONGITUDE, y=LATTIUDE, colour=FLOOR))+geom_point()
View(trainingDataBuilding2)
View(trainingDataBuilding2)
P<-ggplot(trainingData1$FLOOR, mapping=aes(x=LONGITUDE, y=LATTIUDE, colour=FLOOR))+geom_point()
floors_long_lat <- trainingData1%>%
filter(FLOOR)
floors_long_lat <- trainingData1%>%
filter(FLOOR)
P<-ggplot(trainingData1, mapping=aes(x=LONGITUDE, y=LATTIUDE, colour=FLOOR))
P+geom_point()
P<-ggplot(trainingData1, mapping=aes(x=LONGITUDE, y=LATITIUDE, colour=FLOOR))
P+geom_point()
P<-ggplot(trainingData1, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
trainingDataBuilding0<-trainingData1%>%
filter(BUILDINGID==0)
P<-ggplot(trainingDataBuilding0, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
trainingDataBuilding1<-trainingData1%>%
filter(BUILDINGID==1)
P<-ggplot(trainingDataBuilding1, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
trainingDataBuilding2<-trainingData1%>%
filter(BUILDINGID==2)
P<-ggplot(trainingDataBuilding2, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
P<-ggplot(trainingData1, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
#create separate training datasets for each building and plot longitude & latitude showing each floor
trainingDataBuilding0<-trainingData1%>%
filter(BUILDINGID==0)
P<-ggplot(trainingDataBuilding0, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
trainingDataBuilding1<-trainingData1%>%
filter(BUILDINGID==1)
P<-ggplot(trainingDataBuilding1, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
trainingDataBuilding2<-trainingData1%>%
filter(BUILDINGID==2)
P<-ggplot(trainingDataBuilding2, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
if(require("pacman")=="FALSE"){
install.packages('pacman')
library('pacman')
pacman::p_load(here, readxl, plyr, caret, dplyr, doParallel,
lubridate, corrplot, ggplot2,
tidyverse, arules, arulesViz, rstudioapi,RMySQL,
plotly, padr, lubridate, forecast,zoo)
} else {
library('pacman')
pacman::p_load(here, readxl, plyr, caret, dplyr, doParallel,
lubridate, corrplot, ggplot2,
tidyverse, arules, arulesViz, rstudioapi,RMySQL,
plotly, padr, lubridate, forecast,zoo)
}
#Upload the files
trainingData<-read.csv(file="/Users/staceyjackson/Dropbox (Personal)/Ubiqum/May_2019_Wifi/Dataset/UJIndoorLoc/trainingData.csv", header=TRUE, sep=",")
validationData<-read.csv(file="/Users/staceyjackson/Dropbox (Personal)/Ubiqum/May_2019_Wifi/Dataset/UJIndoorLoc/validationData.csv", header=TRUE, sep=",")
#Look at the classes
str(trainingData)
sapply(trainingData, class)
#change 526-528 to factors
columns <- c(526:528)
trainingData[,columns] <- lapply(trainingData[,columns], as.factor)
validationData[,columns] <- lapply(validationData[,columns], as.factor)
sapply(trainingData,class)
sapply(validationData,class)
#change time to POSixt
trainingData$TIMESTAMP <- as.POSIXct(trainingData$TIMESTAMP,origin="1970-01-01")
validationData$TIMESTAMP <- as.POSIXct(validationData$TIMESTAMP,origin="1970-01-01")
#Some plots
plot(trainingData$BUILDINGID)
plot(trainingData$USERID)
plot(trainingData$SPACEID)
p <- ggplot(data = trainingData, mapping = aes(x =USERID, y=PHONEID))
p + geom_point()
p <- ggplot(data = validationData, mapping = aes(x =LONGITUDE, y=LATITUDE))
p + geom_point()
summary(trainingData[,523:529])
summary(validationData[,523:529])
#create new column for location in training set
trainingData$Location <- (trainingData$SPACEID*100 +trainingData$FLOOR*10 +trainingData$BUILDINGID)
#create new column for location in validaiton set
validationData$Location <- (validationData$SPACEID*100 +validationData$FLOOR*10 +validationData$BUILDINGID)
trainingData$Location<-(stringr::str_pad(trainingData$Location, 5, pad = "0"))
validationData$Location<-(stringr::str_pad(validationData$Location, 5, pad = "0"))
#find means of the WAPs
trainingDataMEAN <- 0
for (col in 1:522) {
trainingDataMEAN[col] <- mean(trainingData[,col])
}
trainingDataMEAN <- as.data.frame(trainingDataMEAN)
#remove WAPs with mean=100
trainingData1<-trainingData[,-c(3,4,92,93,94,95,152,158,159,160,215,217,226,227,238,239,240,241,242,243,244,245,246,247,254,293,296,301,303,304,307,333,349,353,360,365,416,419,423,429,433,438,441,442,444,445,451,458,482,485,487,488,491,497,520)]
#find phones with weak signals
phones <- split(trainingData1, trainingData1$PHONEID)
sapply(phones, function(x) {
colMeans(x[, c(1:50)])
})
#variance of the phones
sapply(phones, var)
#WAPs with low variance
low_variance <- sapply(trainingData1[,c(1:465)], var)
low_variance_WAP <- sapply(low_variance, function(x){
(x<5)
})
which(low_variance_WAP, arr.ind = TRUE)
#plots
plot(trainingData1$USERID)
plot(trainingData1$PHONEID)
p <- ggplot(data=trainingData1, mapping=aes(x=USERID, y=PHONEID))
p + geom_point()
p <- ggplot(data=trainingData1, mapping=aes(x=USERID, y=BUILDINGID))
p + geom_point()
#plot of all three buildings' longitude & latitude showing each floor
P<-ggplot(trainingData1, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
#create separate training datasets for each building and plot longitude & latitude showing each floor
trainingDataBuilding0<-trainingData1%>%
filter(BUILDINGID==0)
P<-ggplot(trainingDataBuilding0, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
trainingDataBuilding1<-trainingData1%>%
filter(BUILDINGID==1)
P<-ggplot(trainingDataBuilding1, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
trainingDataBuilding2<-trainingData1%>%
filter(BUILDINGID==2)
P<-ggplot(trainingDataBuilding2, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
#create separate validation datasets for each building
validationDataBuilding0<-validationData%>%
filter(BUILDINGID==0)
validationDataBuilding1<-validationData%>%
filter(BUILDINGID==1)
validationDataBuilding2<-validationData%>%
filter(BUILDINGID==2)
#Boxplots of WAPs in Building0
plot(trainingDataBuilding0[1:100], horizontal=FALSE)
high_values <- sapply(trainingData1[,c(1:465)], function(x){
x>=-30
})
which(high_values, arr.ind = TRUE)
high_values <- sapply(trainingData1[,c(1:465)], function(x){
(x>=-30)
})
which(high_values, arr.ind = TRUE)
index <- which(trainingData1[,c(1:465)] >=-30)
index
#find WAP values >-30
high_values <- which(trainingData1[,c(1:465)]=0)
#find WAP values >-30
high_values <- which(trainingData1[,c(1:465)]==0)
high_values
#find WAP values >-30
high_values <- which(trainingData1[,c(1:465)]==0, arr.ind=TRUE)
high_values
high_values <- sapply(trainingData1[,c(1:465)], function(x){
(x>=-30)
})
which(trainingData1[,c(1:465)]==0, arr.ind=TRUE)
high_values
#WAPs with low variance
low_variance <- sapply(trainingData1[,c(1:465)], var)
low_variance_WAP <- sapply(low_variance, function(x){
(x<5)
})
low_variance_WAP
which(low_variance_WAP, arr.ind = TRUE)
high_values<-sapply(trainingData1[,c(1:465)], function(x){
(x=0)
})
which(high_values, arr.ind=TRUE)
high_values<-sapply(trainingData1[,c(1:465)], function(x){
(x=0)
high_values<-sapply(trainingData1[,c(1:465)], function(x){
(x=0)
})
high_values
if(require("pacman")=="FALSE"){
install.packages('pacman')
library('pacman')
pacman::p_load(here, readxl, plyr, caret, dplyr, doParallel,
lubridate, corrplot, ggplot2,
tidyverse, arules, arulesViz, rstudioapi,RMySQL,
plotly, padr, lubridate, forecast,zoo)
} else {
library('pacman')
pacman::p_load(here, readxl, plyr, caret, dplyr, doParallel,
lubridate, corrplot, ggplot2,
tidyverse, arules, arulesViz, rstudioapi,RMySQL,
plotly, padr, lubridate, forecast,zoo)
}
#Upload the files
trainingData<-read.csv(file="/Users/staceyjackson/Dropbox (Personal)/Ubiqum/May_2019_Wifi/Dataset/UJIndoorLoc/trainingData.csv", header=TRUE, sep=",")
validationData<-read.csv(file="/Users/staceyjackson/Dropbox (Personal)/Ubiqum/May_2019_Wifi/Dataset/UJIndoorLoc/validationData.csv", header=TRUE, sep=",")
#Look at the classes
str(trainingData)
sapply(trainingData, class)
#change 526-528 to factors
columns <- c(526:528)
trainingData[,columns] <- lapply(trainingData[,columns], as.factor)
validationData[,columns] <- lapply(validationData[,columns], as.factor)
sapply(trainingData,class)
sapply(validationData,class)
#change time to POSixt
trainingData$TIMESTAMP <- as.POSIXct(trainingData$TIMESTAMP,origin="1970-01-01")
validationData$TIMESTAMP <- as.POSIXct(validationData$TIMESTAMP,origin="1970-01-01")
#Some plots
plot(trainingData$BUILDINGID)
plot(trainingData$USERID)
plot(trainingData$SPACEID)
p <- ggplot(data = trainingData, mapping = aes(x =USERID, y=PHONEID))
p + geom_point()
p <- ggplot(data = validationData, mapping = aes(x =LONGITUDE, y=LATITUDE))
p + geom_point()
summary(trainingData[,523:529])
summary(validationData[,523:529])
#create new column for location in training set
trainingData$Location <- (trainingData$SPACEID*100 +trainingData$FLOOR*10 +trainingData$BUILDINGID)
#create new column for location in validaiton set
validationData$Location <- (validationData$SPACEID*100 +validationData$FLOOR*10 +validationData$BUILDINGID)
trainingData$Location<-(stringr::str_pad(trainingData$Location, 5, pad = "0"))
validationData$Location<-(stringr::str_pad(validationData$Location, 5, pad = "0"))
#find means of the WAPs
trainingDataMEAN <- 0
for (col in 1:522) {
trainingDataMEAN[col] <- mean(trainingData[,col])
}
trainingDataMEAN <- as.data.frame(trainingDataMEAN)
#remove WAPs with mean=100
trainingData1<-trainingData[,-c(3,4,92,93,94,95,152,158,159,160,215,217,226,227,238,239,240,241,242,243,244,245,246,247,254,293,296,301,303,304,307,333,349,353,360,365,416,419,423,429,433,438,441,442,444,445,451,458,482,485,487,488,491,497,520)]
#find phones with weak signals
phones <- split(trainingData1, trainingData1$PHONEID)
sapply(phones, function(x) {
colMeans(x[, c(1:50)])
})
#variance of the phones
sapply(phones, var)
#WAPs with low variance
low_variance <- sapply(trainingData1[,c(1:465)], var)
low_variance_WAP <- sapply(low_variance, function(x){
(x<5)
})
which(low_variance_WAP, arr.ind = TRUE)
#find WAP values >-30
high_values<-sapply(trainingData1[,c(1:465)], function(x){
(x=0)
})
which(high_values, arr.ind=TRUE)
if(require("pacman")=="FALSE"){
install.packages('pacman')
library('pacman')
pacman::p_load(here, readxl, plyr, caret, dplyr, doParallel,
lubridate, corrplot, ggplot2,
tidyverse, arules, arulesViz, rstudioapi,RMySQL,
plotly, padr, lubridate, forecast,zoo)
} else {
library('pacman')
pacman::p_load(here, readxl, plyr, caret, dplyr, doParallel,
lubridate, corrplot, ggplot2,
tidyverse, arules, arulesViz, rstudioapi,RMySQL,
plotly, padr, lubridate, forecast,zoo)
}
#Upload the files
trainingData<-read.csv(file="/Users/staceyjackson/Dropbox (Personal)/Ubiqum/May_2019_Wifi/Dataset/UJIndoorLoc/trainingData.csv", header=TRUE, sep=",")
validationData<-read.csv(file="/Users/staceyjackson/Dropbox (Personal)/Ubiqum/May_2019_Wifi/Dataset/UJIndoorLoc/validationData.csv", header=TRUE, sep=",")
#Look at the classes
str(trainingData)
sapply(trainingData, class)
#change 526-528 to factors
columns <- c(526:528)
trainingData[,columns] <- lapply(trainingData[,columns], as.factor)
validationData[,columns] <- lapply(validationData[,columns], as.factor)
sapply(trainingData,class)
sapply(validationData,class)
#change time to POSixt
trainingData$TIMESTAMP <- as.POSIXct(trainingData$TIMESTAMP,origin="1970-01-01")
validationData$TIMESTAMP <- as.POSIXct(validationData$TIMESTAMP,origin="1970-01-01")
#Some plots
plot(trainingData$BUILDINGID)
plot(trainingData$USERID)
plot(trainingData$SPACEID)
p <- ggplot(data = trainingData, mapping = aes(x =USERID, y=PHONEID))
p + geom_point()
p <- ggplot(data = validationData, mapping = aes(x =LONGITUDE, y=LATITUDE))
p + geom_point()
summary(trainingData[,523:529])
summary(validationData[,523:529])
#create new column for location in training set
trainingData$Location <- (trainingData$SPACEID*100 +trainingData$FLOOR*10 +trainingData$BUILDINGID)
#create new column for location in validaiton set
validationData$Location <- (validationData$SPACEID*100 +validationData$FLOOR*10 +validationData$BUILDINGID)
trainingData$Location<-(stringr::str_pad(trainingData$Location, 5, pad = "0"))
validationData$Location<-(stringr::str_pad(validationData$Location, 5, pad = "0"))
#find means of the WAPs
trainingDataMEAN <- 0
for (col in 1:522) {
trainingDataMEAN[col] <- mean(trainingData[,col])
}
trainingDataMEAN <- as.data.frame(trainingDataMEAN)
#remove WAPs with mean=100
trainingData1<-trainingData[,-c(3,4,92,93,94,95,152,158,159,160,215,217,226,227,238,239,240,241,242,243,244,245,246,247,254,293,296,301,303,304,307,333,349,353,360,365,416,419,423,429,433,438,441,442,444,445,451,458,482,485,487,488,491,497,520)]
#find phones with weak signals
phones <- split(trainingData1, trainingData1$PHONEID)
sapply(phones, function(x) {
colMeans(x[, c(1:50)])
})
#variance of the phones
sapply(phones, var)
#WAPs with low variance
low_variance <- sapply(trainingData1[,c(1:465)], var)
low_variance_WAP <- sapply(low_variance, function(x){
(x<5)
})
which(low_variance_WAP, arr.ind = TRUE)
#find WAP values >-30
#plots
plot(trainingData1$USERID)
plot(trainingData1$PHONEID)
p <- ggplot(data=trainingData1, mapping=aes(x=USERID, y=PHONEID))
p + geom_point()
p <- ggplot(data=trainingData1, mapping=aes(x=USERID, y=BUILDINGID))
p + geom_point()
#plot of all three buildings' longitude & latitude showing each floor
P<-ggplot(trainingData1, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
#create separate training datasets for each building and plot longitude & latitude showing each floor
trainingDataBuilding0<-trainingData1%>%
filter(BUILDINGID==0)
P<-ggplot(trainingDataBuilding0, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
trainingDataBuilding1<-trainingData1%>%
filter(BUILDINGID==1)
P<-ggplot(trainingDataBuilding1, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
trainingDataBuilding2<-trainingData1%>%
filter(BUILDINGID==2)
P<-ggplot(trainingDataBuilding2, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
#create separate validation datasets for each building
validationDataBuilding0<-validationData%>%
filter(BUILDINGID==0)
validationDataBuilding1<-validationData%>%
filter(BUILDINGID==1)
validationDataBuilding2<-validationData%>%
filter(BUILDINGID==2)
#Boxplots of WAPs in Building0
plot(trainingDataBuilding0[1:100], horizontal=FALSE)
apply(trainingData1, 2, function(r) any(r == 0))
high_value<-apply(trainingData1, 2, function(r) any(r == 0))
which(high_value, arr.ind=TRUE)
high_value<-apply(trainingData1, 2, function(r) any(r >=-30))
which(high_value, arr.ind=TRUE)
high_value<-apply(trainingData1, 2, function(r) any(r=-97))
high_value<-apply(trainingData1, 2, function(r) any(r==-97))
which(high_value, arr.ind=TRUE)
high_value <- apply(trainingData1, 2, function(r) any(r == -67))
which(high_value, arr.ind=TRUE)
high_value <- sapply(trainingData1, 2, function(r) any(r == -67))
high_value <- sapply(trainingData1[,c(1:465)], function(r) any(r == -67))
which(high_value, arr.ind=TRUE)
high_value <- sapply(trainingData1[,c(1:465)], function(r) any(r == -97))
which(high_value, arr.ind=TRUE)
high_value <- sapply(trainingData1[,c(1:465)], function(r) any(r == -67))
which(high_value, arr.ind=TRUE)
high_value <- sapply(trainingData1[,c(1:465)], function(r) any(r >= -30))
which(high_value, arr.ind=TRUE)
high_value <- sapply(trainingData1[,c(1:465)], function(r) any(r <= -30))
which(high_value, arr.ind=TRUE)
high_value <- sapply(trainingData1[,c(1:465)], function(r) any(r >= -30))
high_value
WAPs <- trainingData1[,c(1:465)]
high_value <- sapply(WAPs, function(r) any(r >= -30))
which(high_value, arr.ind=TRUE)
WAPs <- trainingData1[,c(1:465)]
high_value <- sapply(WAPs, function(r) any(r = 0))
which(high_value, arr.ind=TRUE)
apply(trainingData1 > -30, 2, function(x) names(which(x)))
apply(WAPs > -30, 2, function(x) names(which(x)))
apply(WAPs > 0, 2, function(x) names(which(x)))
apply(trainingData1[,c(1:465)] > 0, 2, function(x) names(which(x)))
apply(trainingData1[,c(1:465)] == 0, 2, function(x) names(which(x)))
apply(trainingData1[,c(1:465)] == 100, 2, function(x) names(which(x)))
lapply(split(trainingData1[,c(1:465)], colnames(trainingData1[,c(1:465)] )), function(x)names(x)[which(x > -30)])
lapply(trainingData1[,c(1:465)], colnames(trainingData1[,c(1:465)]), function(x)names(x)[which(x > -30)])
lapply(trainingData1[,c(1:465)], function(x)names(x)[which(x > -30)])
high_value <- lapply(trainingData1[,c(1:465)], function(x)names(x)[which(x > -30)])
which(high_value, arr.ind=TRUE)
high_value <- lapply(trainingData1[,c(1:465)], function(x)names(x)[which(x > -30)])
high_value
high_value <- lapply(trainingData1[,c(1:465)], function(x)names(x)[which(x==0)])
high_value
high_value <- lapply(trainingData1[,c(1:465)], function(x)names(x)[which(x==100)])
high_value
high_value <- lapply(trainingData1[,c(1:465)], function(x)names(x)[which(x==100)])
which(high_value, arr.ind=TRUE)
high_value <- sapply(trainingData1[,c(1:465)], function(x)names(x)[which(x==100)])
which(high_value, arr.ind=TRUE)
high_value <- lapply(trainingData1[,c(1:465)], function(x)names(x)[which(x==100)])
which(high_value, arr.ind=TRUE)
replace_100<-apply(trainingData1[,c(1:2)], function (x){
if(x == 100){
return(-105)
} else{
return(x)
}
})
#if WAP value is 100 chanage to -105
trainingDataTest <- apply(ifelse(trainingData1[,c(1:3)]==100, -105,100))
#if WAP value is 100 chanage to -105
trainingDataTest <- apply((trainingData1[,c(1:3)]==100, function(x), x=-105))
#if WAP value is 100 chanage to -105
trainingDataTest <- apply((trainingData1[,c(1:3)]==100 function(x), x=-105))
#if WAP value is 100 chanage to -105
trainingDataTest <- apply((trainingData1[,c(1:3)]==100), function(x), x=-105))
#if WAP value is 100 chanage to -105
trainingDataTest <- apply(trainingData1[,c(1:3)]==100, function(x), x=-105))
#if WAP value is 100 chanage to -105
trainingDataTest <- apply(trainingData1[,c(1:3)]==100, function(x) x=-105))
#if WAP value is 100 chanage to -105
trainingDataTest <- apply(trainingData1[,c(1:3)]==100, function(x) x=-105)
#if WAP value is 100 chanage to -105
trainingDataTest <- apply(trainingData1[,c(1:3)]==100, 2, function(x) x=-105)
trainingDataTest
high_value <- apply(trainingData1[,c(1:465)], 2,function(x)names(x)[which(x==100)])
high_value
high_value <- apply(trainingData1[,c(1:465)], 2,function(x)names(x)[which(x==-105)])
high_value
plot(trainingData1$LATITUDE)
boxplot(trainingData1$LATITUDE)
boxplot(trainingData1$LONGITUDE)
boxplot(trainingData1$PHONEID)
